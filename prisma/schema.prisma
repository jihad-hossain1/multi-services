generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model icon {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  name    String @unique
  count   Int    @default(0)
}

model ULink {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  link     String
  content  String?
  xname    String?
  secure   Boolean  @default(false)
  xdate    DateTime @default(now())
  status   xstatus  @default(ACTIVE)
  fav      String?
  author   User     @relation(fields: [authorId], references: [id])
  authorId String   @db.ObjectId
}

model LmTmLnk {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  link    String
  content String?
  uid     String
  osInfo  os_info
  xdate   DateTime @default(now())
}

model MacAddTrack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  macadd    String   @unique
  count     Int      @default(0)
  uid       String
  lastused  DateTime @default(now())
  lastreset DateTime @default(now())
}

model User {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  email    String        @unique
  name     String
  password String
  status   ustatus       @default(FREE)
  verify   uverify       @default(PENDING)
  xcode    String?
  count    Int           @default(0)
  limit    premium_count @default(LIMIT)
  xrole    xrole         @default(USER)
  address  Address?
  links    ULink[]
}

model Expense {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  amount   Float           @default(0)
  xdate    DateTime        @default(now())
  xuserid  String
  xbalance String          @default("")
  xbank    BankInfo?
  catid    String          @db.ObjectId
  category Expensecat      @relation(fields: [catid], references: [id], onDelete: Cascade)
  payment  PaymentMethod   @default(CASH)
  note     String?
  xstatus  expense_status? @default(UP)
}

enum expense_status {
  DOWN @map("down")
  UP   @map("up")
}

model Expensecat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  xuserid  String
  expenses Expense[]
  xdate    DateTime  @default(now())

  @@unique([xuserid, name], map: "xuserid_name")
}

model balance {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  xuserid String         @db.ObjectId
  amount  Float          @default(0)
  xtype   String
  xname   String         @unique
  xdesc   String?
  xdate   DateTime       @default(now())
  xstatus balance_status @default(ACTIVE)
  xbank   BankInfo?
}

enum balance_status {
  ACTIVE  @map("0")
  DISABLE @map("1")
}

type BankInfo {
  xcardno         String?
  xcardholdername String?
  xaccno          String?
  xbankname       String?
}

// Address is an embedded document
type Address {
  street String?
  city   String?
  state  String?
  zip    String?
}

type os_info {
  os_macadd  String?
  os_version String?
  ip         String?
  uid        String?
}

enum xrole {
  USER   @map("user")
  XADMIN @map("xadmin")
}

enum premium_count {
  LIMIT     @map("20")
  UNLIMITED @map("unlimited")
}

enum ustatus {
  FREE @map("0")
  PAID @map("1")
}

enum xstatus {
  ACTIVE  @map("0")
  DISABLE @map("1")
}

enum uverify {
  VERIFIED @map("verified")
  PENDING  @map("pending")
}

enum PaymentMethod {
  CASH @map("cash")
  CARD @map("card")
}
